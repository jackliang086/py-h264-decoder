class H264Bits:
    table9_4a_intra = [47, 31, 15, 0, 23, 27, 29, 30, 7, 11, 13, 14, 39, 43, 45, 46, 16, 3, 5, 10, 12, 19, 21, 26, 28, 35, 37, 42, 44, 1,
     2, 4, 8, 17, 18, 20, 24, 6, 9, 22, 25, 32, 33, 34, 36, 40, 38, 41]

    table9_4a_inter = [0,16,1,2,4,8,32,3,5,10,12,15,47,7,11,13,14,6,9,31,35,37,42,44,33,34,36,40,39,43,45,46,17,18,20,24,19,21,26,28,23,27,29,30,22,25,38,41]

    T1s_TC_coeff_token = [
        # [0,2)
        ['1', '000101', '01', '00000111', '000100', '001', '000000111', '00000110', '0000101', '00011', '0000000111',
         '000000110', '00000101', '000011', '00000000111', '0000000110', '000000101', '0000100', '0000000001111',
         '00000000110', '0000000101', '00000100', '0000000001011', '0000000001110', '00000000101', '000000100',
         '0000000001000', '0000000001010', '0000000001101', '0000000100', '00000000001111', '00000000001110',
         '0000000001001', '00000000100', '00000000001011', '00000000001010', '00000000001101', '0000000001100',
         '000000000001111', '000000000001110', '00000000001001', '00000000001100', '000000000001011', '000000000001010',
         '000000000001101', '00000000001000', '0000000000001111', '000000000000001', '000000000001001',
         '000000000001100', '0000000000001011', '0000000000001110', '0000000000001101', '000000000001000',
         '0000000000000111', '0000000000001010', '0000000000001001', '0000000000001100', '0000000000000100',
         '0000000000000110', '0000000000000101', '0000000000001000'],
        # [2,4)
        ['11', '001011', '10', '000111', '00111', '011', '0000111', '001010', '001001', '0101', '00000111', '000110',
         '000101', '0100', '00000100', '0000110', '0000101', '00110', '000000111', '00000110', '00000101', '001000',
         '00000001111', '000000110', '000000101', '000100', '00000001011', '00000001110', '00000001101', '0000100',
         '000000001111', '00000001010', '00000001001', '000000100', '000000001011', '000000001110', '000000001101',
         '00000001100', '000000001000', '000000001010', '000000001001', '00000001000', '0000000001111', '0000000001110',
         '0000000001101', '000000001100', '0000000001011', '0000000001010', '0000000001001', '0000000001100',
         '0000000000111', '00000000001011', '0000000000110', '0000000001000', '00000000001001', '00000000001000',
         '00000000001010', '0000000000001', '00000000000111', '00000000000110', '00000000000101', '00000000000100'],
        # [4,8)
        ['1111', '001111', '1110', '001011', '01111', '1101', '001000', '01100', '01110', '1100', '0001111', '01010',
         '01011', '1011', '0001011', '01000', '01001', '1010', '0001001', '001110', '001101', '1001', '0001000',
         '001010', '001001', '1000', '00001111', '0001110', '0001101', '01101', '00001011', '00001110', '0001010',
         '001100', '000001111', '00001010', '00001101', '0001100', '000001011', '000001110', '00001001', '00001100',
         '000001000', '000001010', '000001101', '00001000', '0000001101', '000000111', '000001001', '000001100',
         '0000001001', '0000001100', '0000001011', '0000001010', '0000000101', '0000001000', '0000000111', '0000000110',
         '0000000001', '0000000100', '0000000011', '0000000010'],
        # [8,)
        ['000011', '000000', '000001', '000100', '000101', '000110', '001000', '001001', '001010', '001011', '001100',
         '001101', '001110', '001111', '010000', '010001', '010010', '010011', '010100', '010101', '010110', '010111',
         '011000', '011001', '011010', '011011', '011100', '011101', '011110', '011111', '100000', '100001', '100010',
         '100011', '100100', '100101', '100110', '100111', '101000', '101001', '101010', '101011', '101100', '101101',
         '101110', '101111', '110000', '110001', '110010', '110011', '110100', '110101', '110110', '110111', '111000',
         '111001', '111010', '111011', '111100', '111101', '111110', '111111'],
        # -1
        ["01", "000111", "1", "000100", "000110", "001", "000011", "0000011", "0000010", "000101", "000010", "00000011",
         "00000010", "0000000"],
        # -2
        ["1", "0001111", "01", "0001110", "0001101", "001", "000000111", "0001100", "0001011", "00001", "000000110",
         "000000101", "0001010", "000001", "0000000111", "0000000110", "000000100", "0001001", "00000000111",
         "00000000110", "0000000101", "0001000", "000000000111", "000000000110", "00000000101", "0000000100",
         "0000000000111", "000000000101", "000000000100", "00000000100"]
    ]

    table9_9_a = [["1", "01", "001", "000"],
                  ["1", "01", "00"],
                  ["1", "0"]]
    table9_9_b = [["0","1","000","000","110","00","00","0"],
                ["1","010","01","001","00","01","01","1"],
                ["2","011","001","01","01","10","1"],
                ["3","0010","100","10","10","11"],
                ["4","0011","101","110","111"],
                ["5","0001","110","111"],
                ["6","0000" "1","111"],
                ["7","0000" "0"]]

    # table9_78 = [{},{},{},{},{},
    #              {},{},
    #              ["000001","0001","00001",],
    #              ['000001','0001','00001','011','11','10'    '010'    '001'    '000000'
    #              {},{},
    #              {"0000":0,"0001":1,"001":2,"010":3,"1":4,"011":5}, #10
    #              {},{},{},{}]
    table9_78 = [
        ["1", "011", "010", "0011", "0010", "00011", "00010", "000011", "000010", "0000011", "0000010", "00000011", "00000010", "000000011", "000000010", "000000001"],
        ["111","110", "101", "100", "011", "0101", "0100", "0011", "0010", "00011", "00010", "000011", "000010", "000001", "000000"],
        ["0101", "111", "110", "101", "0100", "0011", "100", "011", "0010", "00011", "00010", "000001", "00001", "000000"],
        ["00011", "111", "0101", "0100", "110", "101", "100", "0011", "011", "0010", "00010", "00001", "00000"],
        ["0101", "0100", "0011", "111", "110", "101", "100", "011", "0010", "00001", "0001", "00000"],
        ["000001", "00001", "111", "110", "101", "100", "011", "010", "0001", "001", "000000"],
        ["000001", "00001", "101", "100", "011", "11", "010", "0001", "001", "000000"],
        ["000001", "0001", "00001", "011", "11", "10", "010", "001", "000000"],
        ["000001", "000000", "0001", "11", "10", "001", "01", "00001"],
        ["00001", "00000", "001", "11", "10", "01", "0001"],
        ["0000", "0001", "001", "010", "1", "011"],
        ["0000", "0001", "01", "1", "001"],
        ["000", "001", "1", "01"],
        ["00", "01", "1"],
        ["0", "1"]]

    # table9_10 = [{},
    #              {"1" :0, "01":1, "00":2},
    #              {"11":0, "10":1, "01":2, "00":3},
    #              {},{},{},{}]
    table9_10 = [['1','0'],
                ['1','01','00'],
                ['11','10','01','00'],
                ['11','10','01','001','000'],
                ['11','10','011','010','001','000'],
                ['11','000','001','011','010','101','100'],
                ['111','110','101','100','011','010','001','0001','00001','000001','0000001','00000001','000000001','0000000001','00000000001']]

    def __init__(self, bits, debug=False):
        self.bits = bits if debug else bits[24:]

    def u(self,n):
        return self.bits.read(n).uint

    def f(self,n):
        return self.u(n)

    def exp_golomb(self):
        zeros = 0
        while self.bits.read(1).uint == 0:
            zeros += 1
        return 0 if zeros == 0 else 2**zeros - 1 + self.bits.read(zeros).uint

    def ue(self):
        return self.exp_golomb()

    def se(self):
        from math import ceil
        k = self.exp_golomb()
        return (-1)**(k+1) * ceil(k/2)

    def me(self, mb_pred_mode, chroma_array_type):
        if mb_pred_mode == 'Pred_L0':
            mb_pred_mode = 'Inter'

        if chroma_array_type in [1, 2]:
            if mb_pred_mode in ["Intra8x8", "Intra4x4"]:
                table = H264Bits.table9_4a_intra
            elif mb_pred_mode == "Inter":
                table = H264Bits.table9_4a_inter
        else:
            if mb_pred_mode in ["Intra8x8", "Intra4x4"]:
                table = H264Bits.table9_4b_intra
            elif mb_pred_mode == "Inter":
                table = H264Bits.table9_4b_inter
        return table[self.exp_golomb()]

    def ce(self):
        print("ce() not IMPL yet")
        self.debug()
        assert False

    def find_code(self, table):
        if table == {}:
            assert False
        right = self.bits.pos + 1
        left = self.bits.pos
        while not self.bits[left:right].bin in table:
            right += 1
        token = self.bits[left:right].bin
        self.bits.pos = right
        return (token, table.index(token))

    def ce_coeff_token(self, nC):
        # print("    decoding coeff token with nC ", nC)
        # self.debug()
        if 0 <= nC and nC < 2:
            table = H264Bits.T1s_TC_coeff_token[0]
        elif 2 <= nC and nC < 4:
            table = H264Bits.T1s_TC_coeff_token[1]
        elif 4 <= nC and nC < 8:
            table = H264Bits.T1s_TC_coeff_token[2]
        elif nC >= 8:
            table = H264Bits.T1s_TC_coeff_token[3]
        elif nC == -1:
            table = H264Bits.T1s_TC_coeff_token[4]
        elif nC == -2:
            table = H264Bits.T1s_TC_coeff_token[5]
        else:
            raise NameError("Coeff table not found")
        tb = [(0,0),(0,1),(1,1),(0,2),(1,2),(2,2)]
        (token, idx) = self.find_code(table)
        if idx < 6:
            (t1s, tc) = tb[idx]
        else:
            (t1s, tc) = ((idx-6)%4, (idx-6)//4+3)
        return (t1s, tc, token)

    def ce_level_prefix(self):
        zeros = 0
        while self.bits.read(1).uint == 0:
            zeros += 1
        return zeros

    def ce_total_zeros(self, tzVlcIndex, maxNumCoeff):
        # print("    decoding total zeros with tzVlcIndex, maxNumCoeff:", tzVlcIndex, maxNumCoeff)
        if maxNumCoeff == 4:
            table = H264Bits.table9_9_a[tzVlcIndex - 1]
        elif maxNumCoeff == 8:
            table = H264Bits.table9_9_b[tzVlcIndex - 1]
        else:
            # print("    using table 9-7/8")
            table = H264Bits.table9_78[tzVlcIndex - 1]
        (token, value) = self.find_code(table)
        # print("    find token, value:", token, value)
        return value

    def ce_run_before(self, zerosLeft):
        if zerosLeft <= 6:
            table = H264Bits.table9_10[zerosLeft - 1]
        else:
            table = H264Bits.table9_10[6]
        # print("run_before: zerosLeft", zerosLeft)
        (token, value) = self.find_code(table)
        return value

    def ae(self):
        print("ae() not IMPL yet")
        assert False

    def next_bits(self, n):
        return self.bits.peek(n).uint

    def more_data(self):
        return self.bits.pos < self.bits.length

    def byte_aligned(self):
        return self.bits.pos % 8 == 0

    def more_rbsp_data(self):
        if not self.more_data():
            return False
        i = self.bits.length - 1
        while i >= 0:
            if self.bits[i] == True:
                if self.bits.pos == i:
                    return False
                else:
                    return True
            i -= 1

    def debug(self):
        print(self.bits[self.bits.pos:self.bits.pos+64].bin)


if __name__ == "__main__":
    from bitstring import BitStream
    raw = BitStream('0b110010000100')
    bs = H264Bits(raw, debug=True)
    print(bs.next_bits(2))
    print(bs.u(1))
    print(bs.f(1))
    print(bs.ue())
    print(bs.se())
